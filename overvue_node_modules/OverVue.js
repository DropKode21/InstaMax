import Rx from 'rxjs/Rx';
import { Observable } from 'rxjs/Observable';
import applyMixin from './mixin';

const isObservable = obs => obs instanceof Observable;

export class Store {
  constructor(initialState = {}) {
    this.state = this.hasSessionData() ? this.getSessionData() : initialState.state;
    this.motherStream$ = new Rx.BehaviorSubject();
    this.getters = initialState.getters;
  }

  //  create the motherStream
  createStateStream(mutate, state = this.state) {
    console.log('in createStateStream');
    return this.motherStream$
      .flatMap((action) => {
        console.log('flat map', state);
        return isObservable(action) ? action : Observable.from([action]);
      })
      .startWith(state)
      .scan((state, action) => {
        console.log('action', action, 'state', state);
        if (action) {
          mutate(this.state, action);
          this.setSessionData(this.state);
        }
      });
  }

  dispatchAction(func) {
    return function (...args) {
      console.log('in dispatchAction');
      const action = func.call(null, ...args);
      console.log('action', action);
      this.motherStream$.next(action);
      if (isObservable(action.payload)) {
        this.motherStream$.next(action.payload);
      }
      return action;
    }.bind(this);
  }

  setSessionData(state) {
    console.log('set data');
    sessionStorage.setItem('overVue', JSON.stringify(state));
    return this.getSessionData();
  }
  getSessionData() {
    return JSON.parse(sessionStorage.getItem('overVue'));
  }

  hasSessionData() {
    return sessionStorage.getItem('overVue') ? true : false;
  }

}

export default function install(_Vue) {
  applyMixin(_Vue);
}
