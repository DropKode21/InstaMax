import Rx from 'rxjs/Rx';
import { Observable } from 'rxjs/Observable';
import applyMixin from './mixin';
import mutate from '../client/src/overvue/mutate';
const isObservable = function (obs) {
 return obs instanceof Observable;
}

export class Store {
  constructor(initialState = {}) {
    this.state = initialState.state;
    this.motherStream$ = new Rx.BehaviorSubject();
    this.getters = initialState.getters;
  }

  createStateStream(state = this.state) {
    console.log('in createStateStream');
    return this.motherStream$
      .flatMap((action) => {
        console.log('flat map', state);
        return isObservable(action) ? action : Observable.from([action]);
      })
      .startWith(state)
      .scan((state, action) => {
        console.log('action', action, 'state', state);
        if (action) mutate(this.state, action);
      });
  }

  actionCreator(func) {
    return function (...args) {
      console.log('in actionCreator');
      const action = func.call(null, ...args);
      console.log('action', action);
      this.motherStream$.next(action);
      if (isObservable(action.payload)) {
        this.motherStream$.next(action.payload);
      }

      return action;
    }.bind(this);
  }
}

export default function install(_Vue) {
  applyMixin(_Vue);
}
